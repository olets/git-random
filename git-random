#!/usr/bin/env bash

# git-random
# v2.0.0
# August 12 2024
# https://github.com/olets/git-random
# Copyright (©) 2018-present Henry Bley-Vroman

__git_random_commit() {
	local commit_msg
	local extension
	local -i file_created=
	local file_dir
	local file_path
	local id
	local log_msg
	local -i intermediary_commit_int=
	local revision

	file_created=0
	revision="$1"
	intermediary_commit_int="$2"

	(( intermediary_commit_int )) && {
		# Offload ID generation to Git's SHA algorithm.
		# Even more likely to be unique to the repo.
		# Leaves dangling commits (subject to garbage collection, but until then will clutter git-reflog)
		id="$(git rev-parse HEAD)"
		'command' 'git' commit --allow-empty --no-verify -m "git-random: temp child of $id" &>/dev/null
		id="$(git rev-parse HEAD)$id"
		git reset HEAD~ 1>/dev/null
	} || {
		# the following is BSD/Mac-friendly
		# the `env LC_CTYPE=C` can be dropped on other systems
		id=$(env LC_CTYPE=C tr -dc '[:alnum:]' < /dev/urandom | dd bs=4 count=8 2>/dev/null)
	}

	[[ -z "$id" ]] && {
		'builtin' 'printf' "git-random: Error generating random string. Exiting\n"
		exit 7
	}

	file_path="${id}.txt"

	[[ -n "$revision" ]] && \
		file_path="$('command' 'git' log --oneline --name-only -1 "$revision" | tail -1)"

	[[ -f "$file_path" ]] || {
		file_dir=$('command' 'dirname' "$file_path")

		[[ -d "$file_dir" ]] || {
			'command' 'mkdir' -p "$file_dir"
		}

		'command' 'touch' "$file_path" && file_created=1
	}

	'builtin' 'printf' "%s\n" "$id" >> "$file_path" || {
		return 1
	}

	'command' 'git' add "$file_path" || {
		return 2
	}

	log_msg="git-random: Adding the line $id to the "
	(( file_created )) && {
		log_msg+="new "
	} || log_msg+="existing "
	log_msg+="file $file_path, and committing the change."

	commit_msg="Created "
	(( file_created )) || commit_msg="Modified "
	commit_msg+="the file ${file_path:0:7}….txt "
	(( file_created )) || commit_msg+="(${id:0:7}…)"
	commit_msg+="

Added the line
$id"

	'builtin' 'printf' "%s\n" "$log_msg"

	'command' 'git' commit -m "$commit_msg"
}

__git_random_main() {
	local version="2.0.0"
	
	local -i i=
	local intermediary_commit
	local -i intermediary_commit_int=
	local refname
	local revision
	local -i stash=
	local source_dir

	intermediary_commit="$(git config random.intermediaryCommit)"
	intermediary_commit_int=1
	source_dir=$(dirname -- "${BASH_SOURCE[0]}")

	while (( $# )); do
		case $1 in
			--count=*)
				i="${1:8}"

				(( i )) || {
					'builtin' 'printf' "Not a valid <count>: %s\n" "$1"
					return 1
				}

				shift
				;;
			help)
				'command' 'git' random --help 2>/dev/null || 'command' 'man' ${source_dir}/man/man1/git-random.1
				return 2
				;;
			--intermediary-commit=*)
				intermediary_commit=${1:22}
				shift
				;;
			--modify)
				# final "revision" declaration wins, same as e.g. `git commit --fixup=@ --fixup=@~`

				refname="HEAD"
				shift
				;;
			--modify=*)
				# final "revision" declaration wins, same as e.g. `git commit --fixup=@ --fixup=@~`

				refname="${1:9}"

				(( "${#refname}" )) || {
					# message based on that of `git commit --fixup=`
					'builtin' 'printf' "fatal: could not look up revision\n"
					# code from `git rev-parse @@ --`
					exit 128
				}

				shift
				;;
			--version|\
			-v)
				'builtin' 'printf' "%s\n" "$version"
				return
				;;
			-*)
				'builtin' 'printf' "Unsupported option %s\n" "$1"
				return 3
				;;
			*[!0-9]*)
				# not an integer
				'builtin' 'printf' "Not a valid <count>: %s\n" "$1"
				return 1
				;;
			*)
				i="$1"
				shift
				break
		esac
	done

	[[ -n "$intermediary_commit" ]] && {
		case $intermediary_commit in
			false)
				intermediary_commit_int=0
				;;
			true)
				intermediary_commit_int=1
				;;
			*)
				'builtin' 'printf' "Unsupported intermediary-commit value '%s'\n" "$intermediary_commit"
				return 4
				;;
		esac
	}
	
	[[ -n "$refname" ]] && {
		revision="$('command' 'git' rev-parse "$refname" 2>/dev/null)"
		
		(( "$?" )) && {
			# Same error as `git rev-parse somebadsha --`
			# This indirect approach necessary to support `--modify` and `--modify=*` patterns
			'builtin' 'printf' "fatal: bad revision '%s'\n" "$refname"
			exit "10$?"
		}
	}

	[[ -n "$*" ]] && {
		'builtin' 'printf' "Too many arguments\n"
		return 5
	}

	(( "$i" < 1 )) && {
		i=1
	}

	[[ -n $(git diff --cached --name-only) ]] && {
		'builtin' 'printf' "git-random: stashing your staged changes.\n"
		'command' 'git' stash --staged
		'builtin' 'printf' "\n"
		stash=1
	}

	while (( "$i" > 0 )); do
		__git_random_commit "$revision" "$intermediary_commit_int"

		if (( "$i" > 1 )); then
			'builtin' 'printf' "\n"
		fi

		(( i-- ))
	done

	(( stash )) && {
		'builtin' 'printf' "\ngit-random: applying stashed staged changes.\n"

		'command' 'git' stash pop --index --quiet

		(( $? )) && {
			'builtin' 'printf' "git-random: There was a problem applying stashed staged changes. They are in Git's stash{0}.\n"
			return 6
		}
	}
}

__git_random_main $*
